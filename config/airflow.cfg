[core]
# The folder where your airflow pipelines live. This path must be absolute.
dags_folder = /usr/local/airflow/dags

# The folder where airflow should store its log files.This path must be absolute
base_log_folder = /usr/local/airflow/logs

# Where your Airflow plugins are stored
plugins_folder = /usr/local/airflow/plugins

##### Logging ######

# Airflow can store logs remotely in AWS S3. Set this to True if you want to enable remote logging.
remote_logging = False

# Users must supply an Airflow connection id that provides access to the storage location.
remote_log_conn_id =
remote_base_log_folder =
encrypt_s3_logs = False

# Logging level
logging_level = INFO

# Logging level for Flask-appbuilder UI
fab_logging_level = WARN

# Logging class. This class has to be on the python classpath
# Example: logging_config_class = my.path.default_local_settings.LOGGING_CONFIG. TODO remove
logging_config_class =

# Flag to enable/disable Colored logs in Console
colored_console_log = True

# Log format for when Colored logs is enabled
colored_log_format = [%%(blue)s%%(asctime)s%%(reset)s] {{%%(blue)s%%(filename)s:%%(reset)s%%(lineno)d}} %%(log_color)s%%(levelname)s%%(reset)s - %%(log_color)s%%(message)s%%(reset)s
colored_formatter_class = airflow.utils.log.colored_log.CustomTTYColoredFormatter

# Format of Log line
log_format = [%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s
simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s

# Log filename format
log_filename_template = {{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log
log_processor_filename_template = {{ filename }}.log
dag_processor_manager_log_location = /usr/local/airflow/logs/dag_processor_manager/dag_processor_manager.log

# Name of handler to read task instance logs. Default to use task handler.
task_log_reader = task


##### General ######


# Hostname by providing a path to a callable, which will resolve the hostname. The format is "package:function". For example, default value "socket:getfqdn" means that result from getfqdn() of "socket" package will be used as hostname. No argument should be required in the function specified. If using IP address as hostname is preferred, use value ``airflow.utils.net:get_host_ip_address``
hostname_callable = socket:getfqdn

# Default timezone. Can be utc (default), system, or any IANA timezone string (e.g. Europe/Amsterdam)
default_timezone = America/Los_Angeles

# The executor class that airflow should use. Choices include SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor, KubernetesExecutor
executor = SequentialExecutor

##### SqlAlchemy ######


# The SqlAlchemy connection string to the metadata database.
# sql_alchemy_conn = sqlite:////tmp/airflow.db

# The encoding for the databases
sql_engine_encoding = utf-8

# If SqlAlchemy should pool database connections.
sql_alchemy_pool_enabled = True

# The SqlAlchemy pool size is the maximum number of database connections in the pool. 0 indicates no limit.
sql_alchemy_pool_size = 5

# The maximum overflow size of the pool. When the number of checked-out connections reaches pool_size, additional connections will be returned (disconnected and discarded) up to this limit. Total number of simultaneous connections the pool will allow = pool_size + max_overflow; total number of "sleeping" connections the pool will allow is pool_size.
sql_alchemy_max_overflow = 10

# The SqlAlchemy pool recycle is the number of seconds a connection can be idle in the pool before it is invalidated. This config does not apply to sqlite
sql_alchemy_pool_recycle = 1800

# Check connection at the start of each connection pool checkout. (a simple "SELECT 1").
sql_alchemy_pool_pre_ping = True

# The schema to use for the metadata database.
# SqlAlchemy supports databases with the concept of multiple schemas.
sql_alchemy_schema =


##### DAG/TaskInstance ######


# Executor parallelism - the max number of task instances that should run simultaneously
parallelism = 32

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = 16

# Are DAGs paused by default at creation
dags_are_paused_at_creation = True

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = 16

# The number of retries each task is going to have by default. Can be overridden at dag or task level.
default_task_retries = 0

# Whether to load the examples that ship with Airflow.
load_examples = True

# Secret key to save connection passwords in the db
fernet_key = $FERNET_KEY

# Whether to disable pickling dags
donot_pickle = False

# How long before timing out a python file import
dagbag_import_timeout = 30

# How long before timing out a DagFileProcessor, which processes a dag file
dag_file_processor_timeout = 50

# The class to use for running task instances in a subprocess
task_runner = StandardTaskRunner


##### Security ######


# If set, tasks without a ``run_as_user`` argument will be run with this user. Can be used to de-elevate a sudo user running Airflow when executing tasks
default_impersonation =

# What security module to use (for example kerberos)
security =

# If set to False enables some unsecure features like Charts and Ad Hoc Queries. In 2.0 will default to True.
secure_mode = False

# Turn unit test mode on (overwrites many configuration options with test values at runtime)
unit_test_mode = False

# Whether to enable pickling for xcom (note that this is insecure and allows for RCE exploits). This will be deprecated in Airflow 2.0 (be forced to False).
enable_xcom_pickling = True


##### Initialization, serialization, and cleanup ######


# When a task is killed forcefully, this is the amount of time in seconds that it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED
killed_task_cleanup_time = 60

# Whether to override params with dag_run.conf. If you pass some key-value pairs through ``airflow dags backfill -c`` or ``airflow dags trigger -c``, the key-value pairs will override the existing ones in params.
dag_run_conf_overrides_params = False

# Worker initialisation check to validate Metadata Database connection
worker_precheck = False

# When discovering DAGs, ignore any files that don't contain the strings ``DAG`` and ``airflow``.
dag_discovery_safe_mode = True

# Whether to serialize DAGs and persist them in DB. If set to True, Webserver reads from DB instead of parsing DAG files More details: https://airflow.apache.org/docs/stable/dag-serialization.html
store_serialized_dags = False

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_update_interval = 30

# On each dagrun check against defined SLAs
check_slas = True


[cli]
# How the cli accesses the API. The LocalClient will use the database directly, while the json_client will use the api running on the webserver
api_client = airflow.api.client.local_client

# If you set web_server_url_prefix, do NOT forget to append it here, ex: ``endpoint_url = http://localhost:8080/myroot``; the API in total will look like: ``http://localhost:8080/myroot/api/experimental/...``
endpoint_url = http://localhost:8080


[debug]
# Used only with DebugExecutor. If set to True DAG will fail with first failed task. Helpful for debugging purposes.
fail_fast = False


[api]
# How to authenticate users of the API
auth_backend = airflow.api.auth.backend.default


[lineage]
# what lineage backend to use. TODOREMOVE
backend =


[atlas]
sasl_enabled = False
host =
port = 21000
username =
password =

[operators]
# The default owner assigned to each new operator, unless provided explicitly or passed via ``default_args``
default_owner = airflow
default_cpus = 1
default_ram = 512
default_disk = 512
default_gpus = 0


[hive]
# Default mapreduce queue for HiveOperator tasks. TODOREMOVE
default_hive_mapred_queue =


[webserver]
# The base url of your website as airflow cannot guess your domain or CNAME. This is used in automated emails that airflow sends to point links to the right web server
base_url = http://localhost:8080

# The IP specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert =
web_server_ssl_key =

##### Server/Worker Timeouts & Refreshes ######


# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = 120

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Number of workers to refresh at a time. When set to 0, worker refresh is disabled.
worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = 30

# Secret key used to run your flask app. It should be as random as possible
secret_key = temporary_key

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include sync (default), eventlet, gevent
worker_class = sync


##### Server/Worker Logging/Config ######


# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = -

# Log files for the gunicorn webserver. '-' means log to stderr.
error_logfile = -

# Expose the configuration file in the web server
expose_config = True

# Expose hostname in the web server
expose_hostname = True

# Expose stacktrace in the web server
expose_stacktrace = True

# The amount of time (in secs) webserver will wait for initial handshake. while fetching logs from other worker machine
log_fetch_timeout_sec = 5

# Time interval (in secs) to wait before next log fetching.
log_fetch_delay_sec = 2

# Distance away from page bottom to enable auto tailing.
log_auto_tailing_offset = 30

# Animation speed for auto tailing log display.
log_animation_speed = 1000


##### Server Auth/UX ######


# Set to true to turn on authentication. https://airflow.apache.org/security.html#web-authentication
authenticate = False

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = False

# Filtering mode. Choices include user (default) and ldapgroup. (Ldap group filtering requires using the ldap backend). Note: the ldap server needs the "memberOf" overlay to be set up in order to user the ldapgroup mode.
owner_mode = user

# Default DAG view. Valid values are: tree, graph, duration, gantt, landing_times
dag_default_view = tree

# "Default DAG orientation. Valid values are:" LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top). TODOCHANGE
dag_orientation = LR

# Puts the webserver in demonstration mode; blurs the names of Operators for privacy.
demo_mode = False

# By default, the webserver shows paused DAGs. Flip this to hide paused DAGs by default
hide_paused_dags_by_default = False

# Consistent page size across all listing views in the UI
page_size = 100

# Use FAB-based webserver with RBAC feature
rbac = False

# Define the color of navigation bar
navbar_color = #007A87

# Default dagrun to show in UI
default_dag_run_display_number = 25

# Default setting for wrap toggle on DAG code and TI log views.
default_wrap = False

# Allow the UI to be rendered in a frame
x_frame_enabled = True

# Minutes of non-activity before logged out from UI. 0 means never get forcibly logged out
force_log_out_after = 0

# The UI cookie lifetime in days
session_lifetime_days = 30

# Update FAB permissions and sync security manager roles on webserver startup
update_fab_perms = True


##### ProxyFix / Security ######


# Enable werkzeug ``ProxyFix`` middleware for reverse proxy
enable_proxy_fix = False

# Number of values to trust for ``X-Forwarded-For``. More info: https://werkzeug.palletsprojects.com/en/0.16.x/middleware/proxy_fix/
proxy_fix_x_for = 1

# Number of values to trust for ``X-Forwarded-Proto``
proxy_fix_x_proto = 1

# Number of values to trust for ``X-Forwarded-Host``
proxy_fix_x_host = 1

# Number of values to trust for ``X-Forwarded-Port``
proxy_fix_x_port = 1

# Number of values to trust for ``X-Forwarded-Prefix``
proxy_fix_x_prefix = 1

# Set secure flag on session cookie
cookie_secure = False

# Set samesite policy on session cookie
cookie_samesite =


##### Analytics ######


# Send anonymous user activity to your analytics tool; choose from google_analytics, segment, or metarouter
# analytics_tool =

# Unique ID of your account in the analytics tool
# analytics_id =


[scheduler]
# Task instances listen for external kill signal (when you clear tasks from the CLI or the UI), this defines the frequency at which they should listen (in seconds).
job_heartbeat_sec = 5

# The scheduler constantly tries to trigger new tasks. This defines how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = 5

# After how much time should the scheduler terminate in seconds. -1 indicates to run continuously (see also num_runs)
run_duration = -1

# The number of times to try to schedule each DAG file. -1 indicates unlimited number
num_runs = -1

# The number of seconds to wait between consecutive DAG file processing
processor_poll_interval = 1

# after how much time (seconds) a new DAGs should be picked up from the filesystem
min_file_process_interval = 0

# How often (in seconds) to scan the DAGs directory for new files. Default to 5 minutes.
dag_dir_list_interval = 300

# How often should stats be printed to the logs. Setting to 0 will disable printing stats
print_stats_interval = 60

# If the last scheduler heartbeat happened more than scheduler_health_check_threshold ago (in seconds), scheduler is considered unhealthy. This is used by the health check in the "/health" endpoint
scheduler_health_check_threshold = 30

# Local task jobs periodically heartbeat to the DB. If the job has not heartbeat in this many seconds, the scheduler will mark the associated task instance as failed and will re-schedule the task.
scheduler_zombie_task_threshold = 300

child_process_log_directory = /usr/local/airflow/logs/scheduler

# If False: Turn off scheduler catchup (however it can be set on a per DAG basis in the DAG definition (catchup)). Default behavior is unchanged and Command Line Backfills still work
catchup_by_default = True

# This changes the batch size of queries in the scheduling main loop. If this is too high, SQL query performance may be impacted. Additionally, you may hit the maximum allowable query length for your db.
max_tis_per_query = 512

# The scheduler can run multiple threads in parallel to schedule dags. This defines how many threads will run.
max_threads = 2
authenticate = False

# Turn off scheduler use of cron intervals by setting this to False. DAGs submitted manually in the web UI or with trigger_dag will still run.
use_job_schedule = True

# Allow externally triggered DagRuns for Execution Dates in the future. Only has effect if schedule_interval is set to None in DAG
allow_trigger_in_future = False


##### Statsd ######


# Statsd (https://github.com/etsy/statsd) integration settings
statsd_on = False
statsd_host = localhost
statsd_port = 8125
statsd_prefix = airflow

# If you want to avoid send all the available metrics to StatsD, you can configure an allow list of prefixes to send only the metrics that start with the elements of the list (e.g: scheduler,executor,dagrun)
statsd_allow_list =


[email]
email_backend = airflow.utils.email.send_email_smtp


[smtp]

# If you want airflow to send emails on retries, failure, use the airflow.utils.email.send_email_smtp function, you have to configure an SMTP server here
smtp_host = localhost
smtp_starttls = True
smtp_ssl = False
# Example: smtp_user = airflow
# smtp_user =
# Example: smtp_password = airflow
# smtp_password =
smtp_port = 25
smtp_mail_from = airflow@example.com


[sentry]

# Sentry (https://docs.sentry.io) integration
sentry_dsn =


# This section only applies if you are using the CeleryExecutor in ``[core]`` section above
[celery]

# The app name that will be used by celery
celery_app_name = airflow.executors.celery_executor

# The concurrency that will be used when starting workers with the ``airflow celery worker`` command. This defines the number of task instances that a worker will take.
worker_concurrency = 16

# The maximum and minimum concurrency that will be used when starting workers with the ``airflow celery worker`` command; always keeps minimum processes, but can grow to maximum if necessary). If autoscale option is available, worker_concurrency will be ignored.
# Note the value should be max_concurrency,min_concurrency:
worker_autoscale = 16,12

# When you start an airflow worker, airflow starts a tiny web server subprocess to serve the workers local log files to the airflow main web server, who then builds pages and sends them to users. This defines the port on which the logs are served. It needs to be unused, and open visible from the main web server to connect into the workers.
worker_log_server_port = 8793

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally SqlAlchemy
broker_url = redis://redis:6379/1

# The Celery result_backend. When a job finishes, it needs to update the metadata of the job. Therefore it will post a message on a message bus, or insert it into a database (depending of the backend). This status is used by the scheduler to update the state of the task
result_backend = db+postgresql://airflow:airflow@postgres/airflow

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start it - ``airflow flower``. This defines the IP that Celery Flower runs on
flower_host = 0.0.0.0

# The root URL for Flower. Example: flower_url_prefix = /flower
flower_url_prefix =

# This defines the port that Celery Flower runs on
flower_port = 5555

# Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma (Example: flower_basic_auth = user1:password1,user2:password2)
flower_basic_auth =

# Default queue that tasks get assigned to and that worker listen on.
default_queue = default

# How many processes CeleryExecutor uses to sync task state; 0 means to use max(1, number of cores - 1) processes.
sync_parallelism = 0

# Import path for celery configuration options
celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG

# In case of using SSL
ssl_active = False
ssl_key =
ssl_cert =
ssl_cacert =

# Celery Pool implementation. Choices include: prefork (default), eventlet, gevent or solo.
pool = prefork

# Wait (in secs) before timing out ``send_task_to_executor`` or ``fetch_celery_task_state`` operations.
operation_timeout = 2


# This section is for specifying options which can be passed to the underlying celery broker transport. See:
[celery_broker_transport_options]


# The visibility timeout defines the number of seconds to wait for the worker to acknowledge the task before the message is redelivered to another worker. Make sure to increase the visibility timeout to match the time of the longest ETA you're planning to use. visibility_timeout is only supported for Redis and SQS celery brokers.

# Example: visibility_timeout = 21600
visibility_timeout =


[ldap]
# set this to ldaps://<your.ldap.server>:<port>
uri =
user_filter = objectClass=*
user_name_attr = uid
group_member_attr = memberOf
superuser_filter =
data_profiler_filter =
bind_user = cn=Manager,dc=example,dc=com
bind_password = insecure
basedn = dc=example,dc=com
cacert = /etc/ca/ldap_ca.crt
search_scope = LEVEL

# This setting allows the use of LDAP servers that either return a broken schema (or don't return a scheme)
ignore_malformed_schema = False


[admin]
# UI to hide sensitive variable fields when set to True
hide_sensitive_variable_fields = True
